# Day 1

## Part 1

<!-- livebook:{"livebook_object":"cell_input","name":"input","type":"text","value":"199 200 208 210 200 207 240 268 260 263"} -->

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
parse_input = fn input ->
  input |> String.trim() |> String.split() |> Enum.map(&String.to_integer/1)
end

[i | input] = IO.gets("input: ") |> parse_input.()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Enum.zip_reduce(input, [i | input], 0, fn
  current, previous, acc when current > previous -> acc + 1
  _, _, acc -> acc
end)
```

## Part 2

<!-- livebook:{"livebook_object":"cell_input","name":"input","type":"text","value":"199 200 208 210 200 207 240 269 260 263"} -->

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = IO.gets("input: ") |> parse_input.()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
chunk_fun = fn
  e, [a, b, c] ->
    # emit the tri-sum and shift the 
    {:cont, a + b + c, [e, a, b]}

  e, acc ->
    # collect until we have a triple
    {:cont, [e | acc]}
end

after_fun = fn
  # no new element, sum the accumulator and emit
  acc ->
    {:cont, Enum.sum(acc), []}
end

[tri_sum | tri_sums] = Enum.chunk_while(input, [], chunk_fun, after_fun)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Enum.zip_reduce(tri_sums, [tri_sum | tri_sums], 0, fn
  current, previous, acc when current > previous -> acc + 1
  _, _, acc -> acc
end)
```
